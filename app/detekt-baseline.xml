<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>EmptyClassBlock:Review.kt$Review${ }</ID>
    <ID>EmptyFunctionBlock:Message.kt$Message${}</ID>
    <ID>FunctionNaming:Message.kt$Message$fun Message()</ID>
    <ID>FunctionOnlyReturningConstant:PasswordState.kt$@Suppress("UNUSED_PARAMETER") private fun passwordValidationError(password: String): String</ID>
    <ID>FunctionOnlyReturningConstant:PasswordState.kt$private fun passwordConfirmationError(): String</ID>
    <ID>LongMethod:AuthContent.kt$@Composable @InternalCoroutinesApi fun AuthContent( navController: NavController, viewModel: AuthViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:ChatCard.kt$@OptIn(ExperimentalMaterialApi::class) @Composable @InternalCoroutinesApi @ExperimentalCoroutinesApi fun ChatCard( chat: Chat, viewModel: ChatsListViewModel = hiltViewModel(), navController: NavController )</ID>
    <ID>LongMethod:ChatContent.kt$@OptIn(InternalCoroutinesApi::class) @Composable fun ChatContent( navController: NavController, viewModel: ChatViewModel )</ID>
    <ID>LongMethod:ChatTopBar.kt$@Composable fun ChatTopBar( navController: NavController, viewModel: ChatViewModel, chat: Chat )</ID>
    <ID>LongMethod:NavGraph.kt$@Composable @InternalCoroutinesApi @OptIn(ExperimentalAnimationApi::class) fun NavGraph ( navController: NavHostController )</ID>
    <ID>LongMethod:PlannedMessageTemplateScreen.kt$@Composable @InternalCoroutinesApi fun PlannedMessageTemplateScreen( navController: NavController, viewModel: SignUpViewModel = hiltViewModel(), )</ID>
    <ID>LongMethod:PlannedMessagesScreen.kt$@Composable @InternalCoroutinesApi fun PlannedMesagesScreen( navController: NavController, viewModel: SignUpViewModel = hiltViewModel(), )</ID>
    <ID>LongMethod:ProfileCard.kt$@Composable @InternalCoroutinesApi @ExperimentalCoroutinesApi fun ProfileCard( user: User, viewModel: ProfileViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:ProfileContent.kt$@OptIn(InternalCoroutinesApi::class) @Composable fun ProfileContent( navController: NavController, viewModel: ProfileViewModel )</ID>
    <ID>LongMethod:RentalAddContent.kt$@Composable fun RentalAddContent( viewModel: UserDetailsViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:RenterDescriptionContent.kt$@Composable fun RenterDescriptionContent( viewModel: RenterDescriptionViewModel = hiltViewModel() )</ID>
    <ID>LongMethod:ReservationContent.kt$@OptIn(ExperimentalMaterialApi::class) @Composable @InternalCoroutinesApi @ExperimentalCoroutinesApi fun UserCard( navController : NavController, user: User, viewModel: ReservationViewModel )</ID>
    <ID>LongMethod:ReservationContent.kt$@OptIn(InternalCoroutinesApi::class) @Composable fun ReservationContent( navController: NavController, viewModel: ReservationViewModel )</ID>
    <ID>LongMethod:ReservationListScreen.kt$@OptIn(InternalCoroutinesApi::class, ExperimentalMaterialApi::class) @Composable fun ReservationListScreen( viewModel: ReservationViewModel = hiltViewModel(), navController: NavController )</ID>
    <ID>LongMethod:ReviewCard.kt$@Composable @InternalCoroutinesApi @ExperimentalCoroutinesApi fun ReviewCard( review: Review, viewModel: ReviewsViewModel )</ID>
    <ID>LongMethod:ReviewsContent.kt$@OptIn(InternalCoroutinesApi::class) @Composable fun ReviewsContent( navController: NavController, viewModel: ReviewsViewModel )</ID>
    <ID>LongMethod:SearchScreen.kt$@OptIn(ExperimentalMaterialApi::class, InternalCoroutinesApi::class, ExperimentalPagerApi::class) @Composable fun BackdropComponent( rental: Rental, navController: NavController, viewModel: SearchScreenViewModel = hiltViewModel(), )</ID>
    <ID>LongMethod:SearchUserCard.kt$@OptIn(ExperimentalMaterialApi::class) @Composable @InternalCoroutinesApi @ExperimentalCoroutinesApi fun SearchUserCard( navController : NavController, user: User, viewModel: SearchScreenViewModel )</ID>
    <ID>LongMethod:UserDetailsContent.kt$@Composable fun UserDetailsContent( proceedOwner: ()-> Unit, proceedRenter: () -> Unit, viewModel: UserDetailsViewModel = hiltViewModel() )</ID>
    <ID>MagicNumber:ChatContent.kt$0.6</ID>
    <ID>MagicNumber:ChatContent.kt$0.8</ID>
    <ID>MagicNumber:ChatContent.kt$2.3</ID>
    <ID>MagicNumber:ChatViewModel.kt$ChatViewModel$10</ID>
    <ID>MagicNumber:Color.kt$0xFF000000</ID>
    <ID>MagicNumber:Color.kt$0xFF593153</ID>
    <ID>MagicNumber:Color.kt$0xFF758684</ID>
    <ID>MagicNumber:Color.kt$0xFF9A035D</ID>
    <ID>MagicNumber:Color.kt$0xFFE4D9DF</ID>
    <ID>MagicNumber:Color.kt$0xFFE5E5E5</ID>
    <ID>MagicNumber:Color.kt$0xFFFFFFFF</ID>
    <ID>MagicNumber:PasswordState.kt$5</ID>
    <ID>MagicNumber:ProfileCard.kt$10</ID>
    <ID>MagicNumber:ReservationListScreen.kt$1.3</ID>
    <ID>MagicNumber:ReservationListScreen.kt$3.7</ID>
    <ID>MagicNumber:ReviewCard.kt$1.3</ID>
    <ID>MagicNumber:ReviewCard.kt$3</ID>
    <ID>MagicNumber:ReviewCard.kt$3.7</ID>
    <ID>MagicNumber:ReviewCard.kt$4</ID>
    <ID>MagicNumber:ReviewCard.kt$5</ID>
    <ID>MagicNumber:ReviewsContent.kt$1.3</ID>
    <ID>MagicNumber:ReviewsContent.kt$3</ID>
    <ID>MagicNumber:ReviewsContent.kt$3.7</ID>
    <ID>MagicNumber:ReviewsContent.kt$4</ID>
    <ID>MagicNumber:ReviewsContent.kt$5</ID>
    <ID>MagicNumber:ReviewsViewModel.kt$ReviewsViewModel$3</ID>
    <ID>MagicNumber:ReviewsViewModel.kt$ReviewsViewModel$4</ID>
    <ID>MagicNumber:ReviewsViewModel.kt$ReviewsViewModel$5</ID>
    <ID>MagicNumber:SearchScreen.kt$1.35</ID>
    <ID>MagicNumber:SearchScreen.kt$103.87</ID>
    <ID>MagicNumber:SearchScreen.kt$4</ID>
    <ID>MagicNumber:SearchScreen.kt$50f</ID>
    <ID>MaxLineLength:ChatTopBar.kt$navController.navigate("${Constants.REVIEWS_SCREEN}/${viewModel.getUserId(chat)}")</ID>
    <ID>MaxLineLength:CreateUserWithEmailAndPassword.kt$CreateUserWithEmailAndPassword$suspend operator fun invoke(email : String, password : String)</ID>
    <ID>MaxLineLength:RenterDescriptionViewModel.kt$RenterDescriptionViewModel$// val userUidCol = FirebaseFirestore.getInstance().collection("users").whereEqualTo("name", name).addSnapshotListener { snapshot, error -></ID>
    <ID>MaxLineLength:ReservationContent.kt$Text(it.roomNumber.toString() + "-bedroom " + it.rentalType + ", " + it.location)</ID>
    <ID>MaxLineLength:ReservationListScreen.kt$text = "Coming for my finals. We discussed it maybe two weeks or so. I'll live alone, won't have time for parties - finals :("</ID>
    <ID>MaxLineLength:SearchScreen.kt$BackdropComponent(rental = response.data.elementAt(parentPagerState.currentPage), navController = navController)</ID>
    <ID>MaxLineLength:SearchScreen.kt$modifier = Modifier.height(50.dp).width(((LocalConfiguration.current.screenWidthDp)/2).dp)</ID>
    <ID>MaxLineLength:SearchScreen.kt$navController.navigate("${Constants.CHAT_SCREEN}/${viewModel.getChatId(rental = rental)}")</ID>
    <ID>MemberNameEqualsClassName:Message.kt$Message$fun Message()</ID>
    <ID>NewLineAtEndOfFile:AddImageToCloudStorage.kt$ro.greg.swapestate.domain.use_case.cloud_storage_use_cases.AddImageToCloudStorage.kt</ID>
    <ID>NewLineAtEndOfFile:AddRental.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.AddRental.kt</ID>
    <ID>NewLineAtEndOfFile:AddUserInfo.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.AddUserInfo.kt</ID>
    <ID>NewLineAtEndOfFile:AddUserToFireStore.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.AddUserToFireStore.kt</ID>
    <ID>NewLineAtEndOfFile:AuthRepository.kt$ro.greg.swapestate.domain.repository.AuthRepository.kt</ID>
    <ID>NewLineAtEndOfFile:AuthRepositoryImpl.kt$ro.greg.swapestate.data.repository.AuthRepositoryImpl.kt</ID>
    <ID>NewLineAtEndOfFile:AuthScreen.kt$ro.greg.swapestate.presentation.auth.AuthScreen.kt</ID>
    <ID>NewLineAtEndOfFile:AuthUseCases.kt$ro.greg.swapestate.domain.use_case.auth_use_cases.AuthUseCases.kt</ID>
    <ID>NewLineAtEndOfFile:AuthViewModel.kt$ro.greg.swapestate.presentation.auth.AuthViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:BottomNavBar.kt$ro.greg.swapestate.presentation.components.BottomNavBar.kt</ID>
    <ID>NewLineAtEndOfFile:BottomNavItem.kt$ro.greg.swapestate.presentation.components.BottomNavItem.kt</ID>
    <ID>NewLineAtEndOfFile:Chat.kt$ro.greg.swapestate.domain.model.Chat.kt</ID>
    <ID>NewLineAtEndOfFile:ChatContent.kt$ro.greg.swapestate.presentation.chat.components.ChatContent.kt</ID>
    <ID>NewLineAtEndOfFile:CloudStorageRepository.kt$ro.greg.swapestate.domain.repository.CloudStorageRepository.kt</ID>
    <ID>NewLineAtEndOfFile:CloudStorageRepositoryImpl.kt$ro.greg.swapestate.data.repository.CloudStorageRepositoryImpl.kt</ID>
    <ID>NewLineAtEndOfFile:CloudStorageUseCases.kt$ro.greg.swapestate.domain.use_case.cloud_storage_use_cases.CloudStorageUseCases.kt</ID>
    <ID>NewLineAtEndOfFile:Constants.kt$ro.greg.swapestate.core.Constants.kt</ID>
    <ID>NewLineAtEndOfFile:CreateUserWithEmailAndPassword.kt$ro.greg.swapestate.domain.use_case.auth_use_cases.CreateUserWithEmailAndPassword.kt</ID>
    <ID>NewLineAtEndOfFile:Email.kt$ro.greg.shtistorm.presentation.auth.components.Email.kt</ID>
    <ID>NewLineAtEndOfFile:FirestoreRepository.kt$ro.greg.swapestate.domain.repository.FirestoreRepository.kt</ID>
    <ID>NewLineAtEndOfFile:FirestoreUseCases.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.FirestoreUseCases.kt</ID>
    <ID>NewLineAtEndOfFile:GetAuthState.kt$ro.greg.swapestate.domain.use_case.auth_use_cases.GetAuthState.kt</ID>
    <ID>NewLineAtEndOfFile:GetChat.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.GetChat.kt</ID>
    <ID>NewLineAtEndOfFile:GetChatCard.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.GetChatCard.kt</ID>
    <ID>NewLineAtEndOfFile:GetChats.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.GetChats.kt</ID>
    <ID>NewLineAtEndOfFile:GetImageUrl.kt$ro.greg.swapestate.domain.use_case.cloud_storage_use_cases.GetImageUrl.kt</ID>
    <ID>NewLineAtEndOfFile:GetMessages.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.GetMessages.kt</ID>
    <ID>NewLineAtEndOfFile:GetRental.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.GetRental.kt</ID>
    <ID>NewLineAtEndOfFile:GetSeveralImages.kt$ro.greg.swapestate.domain.use_case.cloud_storage_use_cases.GetSeveralImages.kt</ID>
    <ID>NewLineAtEndOfFile:GetUserInfo.kt$ro.greg.swapestate.domain.use_case.firestore_use_cases.GetUserInfo.kt</ID>
    <ID>NewLineAtEndOfFile:GetUserUid.kt$ro.greg.swapestate.domain.use_case.auth_use_cases.GetUserUid.kt</ID>
    <ID>NewLineAtEndOfFile:IsUserAuthenticated.kt$ro.greg.swapestate.domain.use_case.auth_use_cases.IsUserAuthenticated.kt</ID>
    <ID>NewLineAtEndOfFile:MainActivity.kt$ro.greg.swapestate.presentation.MainActivity.kt</ID>
    <ID>NewLineAtEndOfFile:MainViewModel.kt$ro.greg.swapestate.presentation.MainViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:NavGraph.kt$ro.greg.swapestate.presentation.navigation.NavGraph.kt</ID>
    <ID>NewLineAtEndOfFile:Password.kt$ro.greg.shtistorm.presentation.auth.components.Password.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedMessageTemplateScreen.kt$ro.greg.swapestate.presentation.planned_message_template.PlannedMessageTemplateScreen.kt</ID>
    <ID>NewLineAtEndOfFile:ProfileImage.kt$ro.greg.swapestate.presentation.components.ProfileImage.kt</ID>
    <ID>NewLineAtEndOfFile:ProfileScreen.kt$ro.greg.swapestate.presentation.profile.ProfileScreen.kt</ID>
    <ID>NewLineAtEndOfFile:ProfileViewModel.kt$ro.greg.swapestate.presentation.profile.ProfileViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:ProgressBar.kt$ro.greg.swapestate.presentation.components.ProgressBar.kt</ID>
    <ID>NewLineAtEndOfFile:Rental.kt$ro.greg.swapestate.domain.model.Rental.kt</ID>
    <ID>NewLineAtEndOfFile:RentalAddContent.kt$ro.greg.swapestate.presentation.rental_add.components.RentalAddContent.kt</ID>
    <ID>NewLineAtEndOfFile:RentalAddViewModel.kt$ro.greg.swapestate.presentation.rental_add.RentalAddViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:RenterDecriptionScreen.kt$ro.greg.swapestate.presentation.renter_description.RenterDecriptionScreen.kt</ID>
    <ID>NewLineAtEndOfFile:RenterDescriptionContent.kt$ro.greg.swapestate.presentation.renter_description.RenterDescriptionContent.kt</ID>
    <ID>NewLineAtEndOfFile:RenterDescriptionViewModel.kt$ro.greg.swapestate.presentation.renter_description.RenterDescriptionViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:ReservationListTopBar.kt$ro.greg.swapestate.presentation.reservation_list.components.ReservationListTopBar.kt</ID>
    <ID>NewLineAtEndOfFile:ReservationViewModel.kt$ro.greg.swapestate.presentation.reservation.ReservationViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:Response.kt$ro.greg.swapestate.domain.model.Response.kt</ID>
    <ID>NewLineAtEndOfFile:Review.kt$ro.greg.swapestate.domain.model.Review.kt</ID>
    <ID>NewLineAtEndOfFile:ReviewsScreen.kt$ro.greg.swapestate.presentation.reviews.ReviewsScreen.kt</ID>
    <ID>NewLineAtEndOfFile:Shape.kt$ro.greg.shtistorm.presentation.theme.Shape.kt</ID>
    <ID>NewLineAtEndOfFile:SignInAnonymously.kt$ro.greg.swapestate.domain.use_case.auth_use_cases.SignInAnonymously.kt</ID>
    <ID>NewLineAtEndOfFile:SignOut.kt$ro.greg.swapestate.domain.use_case.auth_use_cases.SignOut.kt</ID>
    <ID>NewLineAtEndOfFile:SignUpContent.kt$ro.greg.swapestate.presentation.sign_up.components.SignUpContent.kt</ID>
    <ID>NewLineAtEndOfFile:SignUpTopBar.kt$ro.greg.swapestate.presentation.sign_up.components.SignUpTopBar.kt</ID>
    <ID>NewLineAtEndOfFile:SignUpViewModel.kt$ro.greg.swapestate.presentation.sign_up.SignUpViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:SwapEstateApp.kt$ro.greg.swapestate.SwapEstateApp.kt</ID>
    <ID>NewLineAtEndOfFile:TextFieldError.kt$ro.greg.swapestate.presentation.components.TextFieldError.kt</ID>
    <ID>NewLineAtEndOfFile:Theme.kt$ro.greg.shtistorm.presentation.theme.Theme.kt</ID>
    <ID>NewLineAtEndOfFile:Type.kt$ro.greg.shtistorm.presentation.theme.Type.kt</ID>
    <ID>NewLineAtEndOfFile:User.kt$ro.greg.swapestate.domain.model.User.kt</ID>
    <ID>NewLineAtEndOfFile:UserDetailsContent.kt$ro.greg.swapestate.presentation.user_details.components.UserDetailsContent.kt</ID>
    <ID>NewLineAtEndOfFile:UserDetailsViewModel.kt$ro.greg.swapestate.presentation.user_details.UserDetailsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:Utils.kt$ro.greg.swapestate.core.Utils.kt</ID>
    <ID>PackageNaming:AddImageToCloudStorage.kt$package ro.greg.swapestate.domain.use_case.cloud_storage_use_cases</ID>
    <ID>PackageNaming:AddMessage.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:AddRental.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:AddUserInfo.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:AddUserToFireStore.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:AuthUseCases.kt$package ro.greg.swapestate.domain.use_case.auth_use_cases</ID>
    <ID>PackageNaming:ChatCard.kt$package ro.greg.swapestate.presentation.chats_list.chats_components</ID>
    <ID>PackageNaming:ChatListTopBar.kt$package ro.greg.swapestate.presentation.chats_list.chats_components</ID>
    <ID>PackageNaming:ChatsListScreen.kt$package ro.greg.swapestate.presentation.chats_list</ID>
    <ID>PackageNaming:ChatsListViewModel.kt$package ro.greg.swapestate.presentation.chats_list</ID>
    <ID>PackageNaming:CloudStorageUseCases.kt$package ro.greg.swapestate.domain.use_case.cloud_storage_use_cases</ID>
    <ID>PackageNaming:CreateUserWithEmailAndPassword.kt$package ro.greg.swapestate.domain.use_case.auth_use_cases</ID>
    <ID>PackageNaming:FirestoreUseCases.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetAuthState.kt$package ro.greg.swapestate.domain.use_case.auth_use_cases</ID>
    <ID>PackageNaming:GetChat.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetChatCard.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetChats.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetImageUrl.kt$package ro.greg.swapestate.domain.use_case.cloud_storage_use_cases</ID>
    <ID>PackageNaming:GetMessages.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetRental.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetRentals.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetReviews.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetSeveralImages.kt$package ro.greg.swapestate.domain.use_case.cloud_storage_use_cases</ID>
    <ID>PackageNaming:GetUserInfo.kt$package ro.greg.swapestate.domain.use_case.firestore_use_cases</ID>
    <ID>PackageNaming:GetUserUid.kt$package ro.greg.swapestate.domain.use_case.auth_use_cases</ID>
    <ID>PackageNaming:IsUserAuthenticated.kt$package ro.greg.swapestate.domain.use_case.auth_use_cases</ID>
    <ID>PackageNaming:PlannedMessageTemplateScreen.kt$package ro.greg.swapestate.presentation.planned_message_template</ID>
    <ID>PackageNaming:PlannedMessageTemplateTopBar.kt$package ro.greg.swapestate.presentation.planned_message_template.components</ID>
    <ID>PackageNaming:PlannedMessagesScreen.kt$package ro.greg.swapestate.presentation.planned_messages</ID>
    <ID>PackageNaming:PlannedMessagesTopBar.kt$package ro.greg.swapestate.presentation.planned_messages.components</ID>
    <ID>PackageNaming:RentalAddContent.kt$package ro.greg.swapestate.presentation.rental_add.components</ID>
    <ID>PackageNaming:RentalAddScreen.kt$package ro.greg.swapestate.presentation.rental_add</ID>
    <ID>PackageNaming:RentalAddViewModel.kt$package ro.greg.swapestate.presentation.rental_add</ID>
    <ID>PackageNaming:RenterDecriptionScreen.kt$package ro.greg.swapestate.presentation.renter_description</ID>
    <ID>PackageNaming:RenterDescriptionContent.kt$package ro.greg.swapestate.presentation.renter_description</ID>
    <ID>PackageNaming:RenterDescriptionViewModel.kt$package ro.greg.swapestate.presentation.renter_description</ID>
    <ID>PackageNaming:ReservationListScreen.kt$package ro.greg.swapestate.presentation.reservation_list</ID>
    <ID>PackageNaming:ReservationListTopBar.kt$package ro.greg.swapestate.presentation.reservation_list.components</ID>
    <ID>PackageNaming:SearchRentalCard.kt$package ro.greg.swapestate.presentation.search.search_components</ID>
    <ID>PackageNaming:SearchUserCard.kt$package ro.greg.swapestate.presentation.search.search_components</ID>
    <ID>PackageNaming:SignInAnonymously.kt$package ro.greg.swapestate.domain.use_case.auth_use_cases</ID>
    <ID>PackageNaming:SignOut.kt$package ro.greg.swapestate.domain.use_case.auth_use_cases</ID>
    <ID>PackageNaming:SignUpContent.kt$package ro.greg.swapestate.presentation.sign_up.components</ID>
    <ID>PackageNaming:SignUpScreen.kt$package ro.greg.swapestate.presentation.sign_up</ID>
    <ID>PackageNaming:SignUpTopBar.kt$package ro.greg.swapestate.presentation.sign_up.components</ID>
    <ID>PackageNaming:SignUpViewModel.kt$package ro.greg.swapestate.presentation.sign_up</ID>
    <ID>PackageNaming:UserDetailsContent.kt$package ro.greg.swapestate.presentation.user_details.components</ID>
    <ID>PackageNaming:UserDetailsScreen.kt$package ro.greg.swapestate.presentation.user_details</ID>
    <ID>PackageNaming:UserDetailsViewModel.kt$package ro.greg.swapestate.presentation.user_details</ID>
    <ID>TooGenericExceptionCaught:AuthRepositoryImpl.kt$AuthRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CloudStorageRepositoryImpl.kt$CloudStorageRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:FirestoreRepositoryImpl.kt$FirestoreRepositoryImpl$e: Exception</ID>
    <ID>TooManyFunctions:AppModule.kt$AppModule</ID>
    <ID>TooManyFunctions:FirestoreRepository.kt$FirestoreRepository</ID>
    <ID>TooManyFunctions:FirestoreRepositoryImpl.kt$FirestoreRepositoryImpl : FirestoreRepository</ID>
    <ID>UnusedPrivateMember:AuthContent.kt$var email by remember { mutableStateOf("") }</ID>
    <ID>UnusedPrivateMember:AuthContent.kt$var password by remember { mutableStateOf("") }</ID>
    <ID>UnusedPrivateMember:AuthContent.kt$var username by remember { mutableStateOf("") }</ID>
    <ID>UnusedPrivateMember:ChatContent.kt$navController: NavController</ID>
    <ID>UnusedPrivateMember:ChatListTopBar.kt$viewModel: ChatsListViewModel</ID>
    <ID>UnusedPrivateMember:ChatsListViewModel.kt$ChatsListViewModel$private val cloudStorageUseCases: CloudStorageUseCases</ID>
    <ID>UnusedPrivateMember:ChatsListViewModel.kt$ChatsListViewModel$val userResp = FirebaseFirestore.getInstance().collection("users") .document(userUid).addSnapshotListener { snapshot, e -> val user = snapshot!!.toObject(User::class.java) getChatsList(user!!) }</ID>
    <ID>UnusedPrivateMember:PlannedMessageTemplateScreen.kt$viewModel: SignUpViewModel = hiltViewModel()</ID>
    <ID>UnusedPrivateMember:PlannedMessagesScreen.kt$viewModel: SignUpViewModel = hiltViewModel()</ID>
    <ID>UnusedPrivateMember:ProfileImage.kt$val imageUriSaved = compositionLocalOf {imageUri}</ID>
    <ID>UnusedPrivateMember:RentalAddContent.kt$viewModel: UserDetailsViewModel = hiltViewModel()</ID>
    <ID>UnusedPrivateMember:RentalAddScreen.kt$navController: NavController</ID>
    <ID>UnusedPrivateMember:RentalAddViewModel.kt$RentalAddViewModel$name: String</ID>
    <ID>UnusedPrivateMember:RentalAddViewModel.kt$RentalAddViewModel$phone: String</ID>
    <ID>UnusedPrivateMember:RentalAddViewModel.kt$RentalAddViewModel$private val firestoreUseCases: FirestoreUseCases</ID>
    <ID>UnusedPrivateMember:RentalAddViewModel.kt$RentalAddViewModel$userType: String</ID>
    <ID>UnusedPrivateMember:RenterDecriptionScreen.kt$navController: NavController</ID>
    <ID>UnusedPrivateMember:ReservationListScreen.kt$viewModel: ReservationViewModel = hiltViewModel()</ID>
    <ID>UnusedPrivateMember:ReservationViewModel.kt$ReservationViewModel$private val userUid get() = authUseCases.getUserUid()</ID>
    <ID>UnusedPrivateMember:ReviewsContent.kt$navController: NavController</ID>
    <ID>UnusedPrivateMember:ReviewsViewModel.kt$ReviewsViewModel$private val cloudStorageUseCases: CloudStorageUseCases</ID>
    <ID>UnusedPrivateMember:Theme.kt$darkTheme: Boolean = isSystemInDarkTheme()</ID>
    <ID>UnusedPrivateMember:Theme.kt$private val DarkColorPalette = darkColors( primary = PrimaryColor, // primaryVariant = Purple700, // secondary = Teal200 )</ID>
    <ID>UnusedPrivateMember:UserDetailsScreen.kt$viewModel: UserDetailsViewModel = hiltViewModel()</ID>
    <ID>UtilityClassWithPublicConstructor:Utils.kt$Utils</ID>
    <ID>VarCouldBeVal:AuthContent.kt$var email by remember { mutableStateOf("") }</ID>
    <ID>VarCouldBeVal:AuthContent.kt$var password by remember { mutableStateOf("") }</ID>
    <ID>VarCouldBeVal:AuthContent.kt$var username by remember { mutableStateOf("") }</ID>
    <ID>VarCouldBeVal:UserDetailsContent.kt$var isValidPhone by remember { mutableStateOf(true) }</ID>
    <ID>VariableNaming:ChatsListViewModel.kt$ChatsListViewModel$val _getChatCardState = mutableStateOf&lt;Response&lt;HashMap&lt;String, String?>>>(Response.Loading)</ID>
    <ID>VariableNaming:ReviewsViewModel.kt$ReviewsViewModel$val _reviewsByStars = mutableMapOf&lt;Int, Int>()</ID>
    <ID>WildcardImport:AppModule.kt$import ro.greg.swapestate.domain.use_case.auth_use_cases.*</ID>
    <ID>WildcardImport:AppModule.kt$import ro.greg.swapestate.domain.use_case.firestore_use_cases.*</ID>
    <ID>WildcardImport:AuthContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:AuthContent.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:AuthRepositoryImpl.kt$import ro.greg.swapestate.domain.model.Response.*</ID>
    <ID>WildcardImport:AuthScreen.kt$import ro.greg.swapestate.domain.model.Response.*</ID>
    <ID>WildcardImport:BottomNavBar.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ChatCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ChatContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ChatContent.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ChatListTopBar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ChatScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ChatScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ChatTopBar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ChatViewModel.kt$import ro.greg.swapestate.domain.model.*</ID>
    <ID>WildcardImport:ChatsListViewModel.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:Email.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:FirestoreRepository.kt$import ro.greg.swapestate.domain.model.*</ID>
    <ID>WildcardImport:FirestoreRepositoryImpl.kt$import ro.greg.swapestate.domain.model.*</ID>
    <ID>WildcardImport:FirestoreRepositoryImpl.kt$import ro.greg.swapestate.domain.model.Response.*</ID>
    <ID>WildcardImport:FirestoreUseCases.kt$import ro.greg.swapestate.domain.use_case.*</ID>
    <ID>WildcardImport:Password.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:PlannedMessageTemplateScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PlannedMessageTemplateScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:PlannedMessageTemplateScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:PlannedMessagesScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ProfileCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ProfileCard.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ProfileContent.kt$import androidx.compose.foundation.*</ID>
    <ID>WildcardImport:ProfileContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ProfileContent.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ProfileContent.kt$import ro.greg.shtistorm.presentation.theme.*</ID>
    <ID>WildcardImport:ProfileImage.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ProfileImage.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ProfileScreen.kt$import ro.greg.swapestate.domain.model.Response.*</ID>
    <ID>WildcardImport:ProfileTopBar.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ProfileTopBar.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:RentalAddContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:RentalAddContent.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:RentalAddContent.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:RenterDescriptionContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:RenterDescriptionContent.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:RenterDescriptionContent.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ReservationContent.kt$import androidx.compose.foundation.*</ID>
    <ID>WildcardImport:ReservationContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ReservationContent.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ReservationContent.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:ReservationContent.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ReservationContent.kt$import ro.greg.shtistorm.presentation.theme.*</ID>
    <ID>WildcardImport:ReservationListScreen.kt$import androidx.compose.foundation.*</ID>
    <ID>WildcardImport:ReservationListScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ReservationListScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ReservationListScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:ReservationListScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ReservationListScreen.kt$import ro.greg.shtistorm.presentation.theme.*</ID>
    <ID>WildcardImport:ReviewCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ReviewsContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ReviewsContent.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:ReviewsViewModel.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:SearchRentalCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SearchScreen.kt$import androidx.compose.foundation.*</ID>
    <ID>WildcardImport:SearchScreen.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SearchScreen.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:SearchScreen.kt$import androidx.compose.material.icons.filled.*</ID>
    <ID>WildcardImport:SearchScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:SearchScreen.kt$import com.google.accompanist.pager.*</ID>
    <ID>WildcardImport:SearchScreen.kt$import com.google.maps.android.compose.*</ID>
    <ID>WildcardImport:SearchUserCard.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SignUpContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:SignUpContent.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:UserDetailsContent.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:UserDetailsContent.kt$import androidx.compose.material.*</ID>
    <ID>WildcardImport:UserDetailsContent.kt$import androidx.compose.runtime.*</ID>
  </CurrentIssues>
</SmellBaseline>
